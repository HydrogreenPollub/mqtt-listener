// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ts_data.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1001000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(efbb909ba4a1ca94);
CAPNP_DECLARE_SCHEMA(c60e01a4fd8e0a59);
enum class MasterOperatingState_c60e01a4fd8e0a59: uint16_t {
  IDLE,
  RUNNING,
  SHUTDOWN,
  FAILURE,
};
CAPNP_DECLARE_ENUM(MasterOperatingState, c60e01a4fd8e0a59);
CAPNP_DECLARE_SCHEMA(f2fff5a7244ee925);
enum class ProtiumOperatingState_f2fff5a7244ee925: uint16_t {
  DISCONNECTED,
  SYSTEM_OFF,
  FIRMWARE_VERSION,
  COMMAND_NOT_FOUND,
  ENTERING_TO_STARTING_PHASE,
  ENTERING_TO_RUNNING_PHASE,
  ANODE_SUPPLY_PRESSURE_CHECK,
  TEMPERATURE_CHECK,
  FC_GAS_SYSTEM_CHECK,
  FC_SEALING_CHECK,
  FC_VOLTAGE_CHECK,
  LOW_H2_SUPPLY,
  SHUTDOWN_INITIATED,
  ABNORMAL_SHUTDOWN_INITIATED,
  RUNNING,
};
CAPNP_DECLARE_ENUM(ProtiumOperatingState, f2fff5a7244ee925);

}  // namespace schemas
}  // namespace capnp


struct TSData {
  TSData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::MasterOperatingState_c60e01a4fd8e0a59 MasterOperatingState;

  typedef ::capnp::schemas::ProtiumOperatingState_f2fff5a7244ee925 ProtiumOperatingState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(efbb909ba4a1ca94, 18, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TSData::Reader {
public:
  typedef TSData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTime() const;

  inline  ::uint64_t getTimeBeforeTransmit() const;

  inline float getAccessoryBatteryVoltage() const;

  inline float getAccessoryBatteryCurrent() const;

  inline float getFuelCellOutputVoltage() const;

  inline float getFuelCellOutputCurrent() const;

  inline float getSupercapacitorVoltage() const;

  inline float getSupercapacitorCurrent() const;

  inline float getMotorControllerSupplyVoltage() const;

  inline float getMotorControllerSupplyCurrent() const;

  inline float getFuelCellEnergyAccumulated() const;

  inline float getH2PressureLow() const;

  inline float getH2PressureFuelCell() const;

  inline float getH2PressureHigh() const;

  inline float getH2LeakageSensorVoltage() const;

  inline float getFanDutyCycle() const;

  inline float getBlowerDutyCycle() const;

  inline float getTemperatureFuelCellLocation1() const;

  inline float getTemperatureFuelCellLocation2() const;

  inline float getAccelPedalVoltage() const;

  inline float getBrakePedalVoltage() const;

  inline float getAccelOutputVoltage() const;

  inline float getBrakeOutputVoltage() const;

  inline  ::uint8_t getButtonsMasterMask() const;

  inline  ::uint8_t getButtonsSteeringWheelMask() const;

  inline float getSensorRpm() const;

  inline float getSensorSpeed() const;

  inline  ::uint8_t getLapNumber() const;

  inline  ::uint64_t getLapTime() const;

  inline float getGpsAltitude() const;

  inline float getGpsLatitude() const;

  inline float getGpsLongitude() const;

  inline float getGpsSpeed() const;

  inline  ::TSData::MasterOperatingState getMasterState() const;

  inline  ::TSData::ProtiumOperatingState getProtiumState() const;

  inline bool getMainValveEnableOutput() const;

  inline bool getMotorControllerEnableOutput() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TSData::Builder {
public:
  typedef TSData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTime();
  inline void setTime( ::uint64_t value);

  inline  ::uint64_t getTimeBeforeTransmit();
  inline void setTimeBeforeTransmit( ::uint64_t value);

  inline float getAccessoryBatteryVoltage();
  inline void setAccessoryBatteryVoltage(float value);

  inline float getAccessoryBatteryCurrent();
  inline void setAccessoryBatteryCurrent(float value);

  inline float getFuelCellOutputVoltage();
  inline void setFuelCellOutputVoltage(float value);

  inline float getFuelCellOutputCurrent();
  inline void setFuelCellOutputCurrent(float value);

  inline float getSupercapacitorVoltage();
  inline void setSupercapacitorVoltage(float value);

  inline float getSupercapacitorCurrent();
  inline void setSupercapacitorCurrent(float value);

  inline float getMotorControllerSupplyVoltage();
  inline void setMotorControllerSupplyVoltage(float value);

  inline float getMotorControllerSupplyCurrent();
  inline void setMotorControllerSupplyCurrent(float value);

  inline float getFuelCellEnergyAccumulated();
  inline void setFuelCellEnergyAccumulated(float value);

  inline float getH2PressureLow();
  inline void setH2PressureLow(float value);

  inline float getH2PressureFuelCell();
  inline void setH2PressureFuelCell(float value);

  inline float getH2PressureHigh();
  inline void setH2PressureHigh(float value);

  inline float getH2LeakageSensorVoltage();
  inline void setH2LeakageSensorVoltage(float value);

  inline float getFanDutyCycle();
  inline void setFanDutyCycle(float value);

  inline float getBlowerDutyCycle();
  inline void setBlowerDutyCycle(float value);

  inline float getTemperatureFuelCellLocation1();
  inline void setTemperatureFuelCellLocation1(float value);

  inline float getTemperatureFuelCellLocation2();
  inline void setTemperatureFuelCellLocation2(float value);

  inline float getAccelPedalVoltage();
  inline void setAccelPedalVoltage(float value);

  inline float getBrakePedalVoltage();
  inline void setBrakePedalVoltage(float value);

  inline float getAccelOutputVoltage();
  inline void setAccelOutputVoltage(float value);

  inline float getBrakeOutputVoltage();
  inline void setBrakeOutputVoltage(float value);

  inline  ::uint8_t getButtonsMasterMask();
  inline void setButtonsMasterMask( ::uint8_t value);

  inline  ::uint8_t getButtonsSteeringWheelMask();
  inline void setButtonsSteeringWheelMask( ::uint8_t value);

  inline float getSensorRpm();
  inline void setSensorRpm(float value);

  inline float getSensorSpeed();
  inline void setSensorSpeed(float value);

  inline  ::uint8_t getLapNumber();
  inline void setLapNumber( ::uint8_t value);

  inline  ::uint64_t getLapTime();
  inline void setLapTime( ::uint64_t value);

  inline float getGpsAltitude();
  inline void setGpsAltitude(float value);

  inline float getGpsLatitude();
  inline void setGpsLatitude(float value);

  inline float getGpsLongitude();
  inline void setGpsLongitude(float value);

  inline float getGpsSpeed();
  inline void setGpsSpeed(float value);

  inline  ::TSData::MasterOperatingState getMasterState();
  inline void setMasterState( ::TSData::MasterOperatingState value);

  inline  ::TSData::ProtiumOperatingState getProtiumState();
  inline void setProtiumState( ::TSData::ProtiumOperatingState value);

  inline bool getMainValveEnableOutput();
  inline void setMainValveEnableOutput(bool value);

  inline bool getMotorControllerEnableOutput();
  inline void setMotorControllerEnableOutput(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TSData::Pipeline {
public:
  typedef TSData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t TSData::Reader::getTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TSData::Builder::getTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TSData::Reader::getTimeBeforeTransmit() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TSData::Builder::getTimeBeforeTransmit() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setTimeBeforeTransmit( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getAccessoryBatteryVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getAccessoryBatteryVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setAccessoryBatteryVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getAccessoryBatteryCurrent() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getAccessoryBatteryCurrent() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setAccessoryBatteryCurrent(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getFuelCellOutputVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getFuelCellOutputVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setFuelCellOutputVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getFuelCellOutputCurrent() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getFuelCellOutputCurrent() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setFuelCellOutputCurrent(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getSupercapacitorVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getSupercapacitorVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setSupercapacitorVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getSupercapacitorCurrent() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getSupercapacitorCurrent() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setSupercapacitorCurrent(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getMotorControllerSupplyVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getMotorControllerSupplyVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setMotorControllerSupplyVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getMotorControllerSupplyCurrent() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getMotorControllerSupplyCurrent() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setMotorControllerSupplyCurrent(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getFuelCellEnergyAccumulated() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getFuelCellEnergyAccumulated() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setFuelCellEnergyAccumulated(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getH2PressureLow() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getH2PressureLow() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setH2PressureLow(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getH2PressureFuelCell() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getH2PressureFuelCell() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setH2PressureFuelCell(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getH2PressureHigh() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getH2PressureHigh() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setH2PressureHigh(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getH2LeakageSensorVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getH2LeakageSensorVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setH2LeakageSensorVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getFanDutyCycle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getFanDutyCycle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setFanDutyCycle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getBlowerDutyCycle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getBlowerDutyCycle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setBlowerDutyCycle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getTemperatureFuelCellLocation1() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getTemperatureFuelCellLocation1() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setTemperatureFuelCellLocation1(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getTemperatureFuelCellLocation2() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getTemperatureFuelCellLocation2() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setTemperatureFuelCellLocation2(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getAccelPedalVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getAccelPedalVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setAccelPedalVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getBrakePedalVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getBrakePedalVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setBrakePedalVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getAccelOutputVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getAccelOutputVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setAccelOutputVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getBrakeOutputVoltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getBrakeOutputVoltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setBrakeOutputVoltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TSData::Reader::getButtonsMasterMask() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TSData::Builder::getButtonsMasterMask() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setButtonsMasterMask( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TSData::Reader::getButtonsSteeringWheelMask() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TSData::Builder::getButtonsSteeringWheelMask() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setButtonsSteeringWheelMask( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getSensorRpm() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getSensorRpm() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setSensorRpm(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getSensorSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getSensorSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setSensorSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TSData::Reader::getLapNumber() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TSData::Builder::getLapNumber() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setLapNumber( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TSData::Reader::getLapTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TSData::Builder::getLapTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setLapTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getGpsAltitude() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getGpsAltitude() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setGpsAltitude(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getGpsLatitude() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getGpsLatitude() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setGpsLatitude(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getGpsLongitude() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getGpsLongitude() {
  return _builder.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setGpsLongitude(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline float TSData::Reader::getGpsSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline float TSData::Builder::getGpsSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setGpsSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::TSData::MasterOperatingState TSData::Reader::getMasterState() const {
  return _reader.getDataField< ::TSData::MasterOperatingState>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline  ::TSData::MasterOperatingState TSData::Builder::getMasterState() {
  return _builder.getDataField< ::TSData::MasterOperatingState>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setMasterState( ::TSData::MasterOperatingState value) {
  _builder.setDataField< ::TSData::MasterOperatingState>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline  ::TSData::ProtiumOperatingState TSData::Reader::getProtiumState() const {
  return _reader.getDataField< ::TSData::ProtiumOperatingState>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline  ::TSData::ProtiumOperatingState TSData::Builder::getProtiumState() {
  return _builder.getDataField< ::TSData::ProtiumOperatingState>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setProtiumState( ::TSData::ProtiumOperatingState value) {
  _builder.setDataField< ::TSData::ProtiumOperatingState>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline bool TSData::Reader::getMainValveEnableOutput() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<824>() * ::capnp::ELEMENTS);
}

inline bool TSData::Builder::getMainValveEnableOutput() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<824>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setMainValveEnableOutput(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<824>() * ::capnp::ELEMENTS, value);
}

inline bool TSData::Reader::getMotorControllerEnableOutput() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<825>() * ::capnp::ELEMENTS);
}

inline bool TSData::Builder::getMotorControllerEnableOutput() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<825>() * ::capnp::ELEMENTS);
}
inline void TSData::Builder::setMotorControllerEnableOutput(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<825>() * ::capnp::ELEMENTS, value);
}


CAPNP_END_HEADER

